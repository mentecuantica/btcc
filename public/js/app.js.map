{"version":3,"sources":["tree-prepare-for-output.js"],"names":[],"mappingsfile":"app.js","sourcesContent":["var analyzeTree = function (treeObj) {\r\n    // обходим все Node из списка в поисках Children\r\n    var binaryPositions = ['L', 'R'];\r\n\r\n    jQuery(treeObj).each(function (index, node) {\r\n\r\n        // Children есть\r\n        if (node.hasOwnProperty('children')) {\r\n            console.log('Index', index, 'treeObj', node);\r\n            length = node.children.length;\r\n            if (0 === length) {\r\n                getVirtualFreeNode(node.child_id, binaryPositions)\r\n                // getVirtualFreeNode(node.child_id, binaryPositions);\r\n            }\r\n            ;\r\n\r\n            if (1 === length) {\r\n                var existingPostion = node.bt_position;\r\n                var singlePositionArray = existingPostion == 'R' ? ['L'] : ['R'];\r\n\r\n                console.log({'Single': singlePositionArray});\r\n                getVirtualFreeNode(node.child_id, singlePositionArray);\r\n                //\r\n                analyzeTree(node.children);\r\n            }\r\n\r\n            if (length === 2) {\r\n                // iterate again\r\n                analyzeTree(node.children);\r\n            }\r\n            ;\r\n        }\r\n        else {\r\n            // Children нет\r\n            getVirtualFreeNode(node.child_id, binaryPositions)\r\n\r\n        }\r\n    });\r\n};\r\n\r\n\r\nvar modifyTree = function (nodes) {\r\n\r\n    jQuery(nodes).each(function (index, node) {\r\n\r\n        if (node.hasOwnProperty('children')) {\r\n            //console.log('Recuresion for children: ',index);\r\n            modifyTree(node.children);\r\n        }\r\n\r\n        if (node.hasOwnProperty('child_id')) {\r\n\r\n            var childId = node.child_id;\r\n            if (true == _.includes(_.map(freeNodes, function (obj) {\r\n                    return obj.searchId;\r\n                }), childId)) {\r\n                console.log('We need add to node', childId);\r\n\r\n\r\n                var newChildrenObj = _.find(freeNodes, function (obj) {\r\n                    return obj.searchId == childId;\r\n                });\r\n\r\n                if (undefined !== newChildrenObj) {\r\n                    var childrenToAdd = newChildrenObj.children;\r\n                    // merge with someone\r\n                    if (node.hasOwnProperty('children')) {\r\n                        var realChildren = node.children;\r\n\r\n                        childrenToAdd = realChildren.concat(childrenToAdd);\r\n                        node[\"children\"] = childrenToAdd;\r\n                    }\r\n                    // create new children\r\n                    else {\r\n                        node[\"children\"] = childrenToAdd;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n        ;\r\n\r\n\r\n    });\r\n}\r\n\r\n/**\r\n * Add new objects for as children to parentNodeId\r\n *\r\n *\r\n * @param positions\r\n * @param parentNodeId\r\n * @returns {Array}\r\n */\r\nvar createChildrenNodes = function (positions, parentNodeId) {\r\n    var newNodes = [];\r\n    for (var i = 0; i < positions.length; i++) {\r\n        var pos = positions[i];\r\n        var newNode = {\r\n            parent_id: parentNodeId,\r\n            HTMLclass: \"free\",\r\n            bt_position: pos,\r\n            name: \"Free position\",\r\n            text: {\r\n                title: \"Free position\",\r\n                desc: \"Binary:\" + pos,\r\n            },\r\n            innerHTML: \"<div class='binary-data' data-binary-position=\" + pos + \" data-parent-id=\" + parentNodeId + \">Free \"+ pos + \" position</div>\",\r\n            is_new: true,\r\n        };\r\n        newNodes.push(newNode);\r\n    }\r\n    return newNodes;\r\n};\r\n\r\n/**\r\n * Creates virtual free node and pushes it to freeNodes array\r\n *\r\n * @param parentNodeId\r\n * @param positions\r\n */\r\nvar getVirtualFreeNode = function (parentNodeId, positions) {\r\n    console.log('Add free node to:', parentNodeId, positions);\r\n\r\n    var newNodes = createChildrenNodes(positions, parentNodeId);\r\n\r\n    freeNodes.push({searchId: parentNodeId, children: newNodes});\r\n\r\n}\r\n\r\n\r\nvar freeNodes = [];\r\n\r\n\r\nvar decorateTreeConfig = function (usersNestedArray) {\r\n\r\n\r\n    _.forEach(usersNestedArray, function (elem, key) {\r\n\r\n    });\r\n\r\n};\r\n\r\nvar initBinaryTree = function (containerID, parentNode, childrenNodes) {\r\n\r\n    var treeInstance = (function() {\r\n        \"use strict\";\r\n        var treeConfig = {\r\n            chart: {\r\n                container: containerID,\r\n                node: {\r\n                    collapsable: true\r\n                },\r\n            },\r\n            nodeStructure: {\r\n                HTMLclass: \"owner\",\r\n                child_id: parentNode.child_id,\r\n                collapsed: true, \r\n                text: {\r\n                    title: \"You\",\r\n                    desc: parentNode.name,\r\n                },\r\n\r\n                children: JSON.parse(childrenNodes)\r\n            }\r\n        };\r\n        return treeConfig;\r\n    })(containerID, parentNode, childrenNodes);\r\n\r\n   // var treeInstance = generataTreantInitialConfig();\r\n\r\n    analyzeTree(treeInstance.nodeStructure);\r\n\r\n    /*var nodesToModify = _.map(freeNodes, function (obj) {\r\n     return obj.searchId;\r\n     });\r\n     */\r\n    modifyTree(treeInstance.nodeStructure);\r\n\r\n    var treantInstance = new Treant(treeInstance);\r\n\r\n\r\n    $(\"#tree-container\").on(\"click\",\".node.free\", function () {\r\n        $dataElement =$(this).children(\".binary-data\").data();\r\n\r\n        $(\"#binary-position\").val($dataElement.binaryPosition);\r\n        $(\"#binary-parent-id\").val($dataElement.parentId);\r\n        console.log($dataElement);\r\n    })\r\n}\r\n\r\n\r\nvar decorateTernaryTreeConfig = function (usersNestedArray) {\r\n   _.forEach(usersNestedArray, function (node, key) {\r\n\r\n       if (node.name==null) {\r\n           node.name = 'ID '+node.user_id;\r\n       }\r\n       node[\"text\"]={\r\n            title:  node.t_position,\r\n            name:   node.name,\r\n            desc: node.name,\r\n        };\r\n       if (node.hasOwnProperty('children')) {\r\n           decorateTernaryTreeConfig(node.children);\r\n       };\r\n        return node;\r\n    });\r\n\r\n};\r\n\r\nvar initTernaryTree = function (containerID, parentNode, childrenNodes) {\r\n\r\n    //var chi1 =\r\n        decorateTernaryTreeConfig(childrenNodes);\r\n\r\n    //console.log(chi1);\r\n\r\n\r\n    var treeInstance = (function() {\r\n        \"use strict\";\r\n        var treeConfig = {\r\n            chart: {\r\n                container: containerID,\r\n                node: {\r\n                    collapsable: true\r\n                },\r\n            },\r\n            nodeStructure: {\r\n                HTMLclass: \"owner\",\r\n                child_id: parentNode.child_id,\r\n                collapsed: false,\r\n                text: {\r\n                    title: \"You\",\r\n                    desc: parentNode.name,\r\n                },\r\n\r\n                children: childrenNodes\r\n            }\r\n        };\r\n        return treeConfig;\r\n    })(containerID, parentNode, childrenNodes);\r\n\r\n\r\n    var treantInstance = new Treant(treeInstance);\r\n\r\n\r\n}\r\n\r\n"],"sourceRoot":"/source/"}