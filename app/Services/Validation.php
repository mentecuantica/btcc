<?php


namespace Btcc\Services;
use Illuminate\Validation\Validator;
use LinusU\Bitcoin\AddressValidator;

/**
 * Class Validation
 * @package Btcc\Services
 */
class Validation extends Validator {
    /**
     * My validation rules that imply the field is required.
     *
     * @var array
     */
    protected $myImplicitRules = ['treebinaryfree','enoughMoney','bitcoinAddress','hasEnoughFunds'];

    /**
     * Determine if a given rule implies the attribute is required.
     *
     * @param  string  $rule
     * @return bool
     */
    protected function isImplicit($rule)
    {
        return in_array($rule, array_merge($this->implicitRules, $this->myImplicitRules));
    }

    public function validateTreebinaryfree($attribute, $value, $parameters)
    {
        return true;
    }

    /**
     * run when writing data to inaccessible members.
     *
     * @param $name string
     * @param $value mixed
     *
     * @return void
     * @link http://php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.members
     */
    function __set($name, $value)
    {
        // TODO: Implement __set() method.
    }

    public function validateEnoughMoney($attribute, $value, $messages,  $parameters)
    {

        \Log::error('We validate money for package ',[$value,$parameters]);

        /**
         * @var  PackageService $packageService
         */
        $packageService = app(PackageService::class);

        $userFinances = user()->totalSum;

        $packageToBuy = $packageService->find($value);

        $repreat = $packageToBuy->price - $userFinances;

        if ($userFinances<=$packageToBuy->price) {
            $message = sprintf('Package %s cost: %d $, need more + %d, diff',$packageToBuy->name, $packageToBuy->price, $repreat );
            $this->messages()->add('validateEnoughMoney',$message);
            $this->invalid();
            return false;
        }

        return true;

    }



    public function validateBitcoinAddress($attribute, $value, $messages,  $parameters)
    {
        $isValid = AddressValidator::isValid($value);

        if (!$isValid) {
            $message = sprintf('Bitcoin addsess %s is invalid',$value);
            $this->messages()->add('validation.bitcoin_address',$message);
           // $this->invalid();
            return false;
        }

        return true;

    }

    public function validateHasEnoughFunds($attribute, $value, $messages,  $parameters)
    {


        $userFinances = user()->totalSum;




        if ($userFinances<=$value) {
            $message =
                sprintf('Amount to withdraw %d $ is more then you have % $',
                    $value, $userFinances);
            $this->messages()->add('validateHasEnoughFunds',$message);
            $this->invalid();
            return false;
        }

        return true;

    }


    /**
     * Validate that a required attribute exists.
     *
     * @param  string $attribute
     * @param  mixed  $value
     *
     * @return bool
     */
    protected function validateRequired($attribute, $value)
    {
        return parent::validateRequired($attribute, $value); // TODO: Change the autogenerated stub
    }
}