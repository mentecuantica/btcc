<?php
/**
 * Author: Alan Karr
 * User: octopus
 * Date: 6/1/2016
 * Time: 3:35 PM
 * Filename: User.php
 */

namespace Btcc\Models;
use Baum\Extensions\Eloquent\Collection;
use Btcc\Models\Invite;
use Btcc\Models\Tree\TreeBinary;
use Btcc\Models\Tree\TreeLinear;
use Btcc\Models\Wallet;
use Btcc\Services\BinaryTree;
use Cartalyst\Sentinel\Users\EloquentUser as SentinelUser;
use Illuminate\Contracts\Auth\Authenticatable;
use Watson\Validating\ValidatingTrait;

/**
 * Class User
 *
 * @package Btcc\Models
 * @property integer $id
 * @property string $email
 * @property string $password
 * @property string $permissions
 * @property string $last_login
 * @property string $first_name
 * @property string $last_name
 * @property \Carbon\Carbon $created_at
 * @property \Carbon\Carbon $updated_at
 * @property-read \Btcc\Models\Tree\TreeBinary $binary
 * @property-read \Btcc\Models\Tree\TreeLinear $linear
 * @property-read \Btcc\Models\Profile $profile
 * @property-read \Btcc\Models\Wallet $wallet
 * @property-read \Illuminate\Database\Eloquent\Collection|\Btcc\Models\Invite[] $invitesIssued
 * @property-read \Illuminate\Database\Eloquent\Collection|\Btcc\Models\Transaction[] $transactionsSent
 * @property-read \Illuminate\Database\Eloquent\Collection|\Btcc\Models\Transaction[] $transactionsRecieved
 * @property-read \Illuminate\Database\Eloquent\Collection|\Cartalyst\Sentinel\Roles\EloquentRole[] $roles
 * @property-read \Illuminate\Database\Eloquent\Collection|\Cartalyst\Sentinel\Persistences\EloquentPersistence[] $persistences
 * @property-read \Illuminate\Database\Eloquent\Collection|\Cartalyst\Sentinel\Activations\EloquentActivation[] $activations
 * @property-read \Illuminate\Database\Eloquent\Collection|\Cartalyst\Sentinel\Reminders\EloquentReminder[] $reminders
 * @property-read \Illuminate\Database\Eloquent\Collection|\Cartalyst\Sentinel\Throttling\EloquentThrottle[] $throttle
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\User whereId($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\User whereEmail($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\User wherePassword($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\User wherePermissions($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\User whereLastLogin($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\User whereFirstName($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\User whereLastName($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\User whereCreatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\User whereUpdatedAt($value)
 * @mixin \Eloquent
 */
class User extends SentinelUser  implements Authenticatable {


    use ValidatingTrait;

    /**
     * New inline validation from
     * use Watson\Validating\ValidatingTrait;
     *
     * @var array
     */
    protected $rules =[
        'email'           => 'required|email|max:255|unique:users',
        //'password'    => 'required',
      //  'parent_id' => 'required'
    ];



    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::created(function(User $newUser) {
            $newUser->createRelatedLinearRelation();
        });
    }

    public function createRelatedLinearRelation()
    {
        $linearRelated = TreeLinear::create(['user_id'=>$this->id]);
    }



    /**
     * Returns a nested collection
     *
     * @return Collection
     */
    public function getLinearTree()
    {
        return $this->linear->descendantsAndSelf()->with('user')->get()->toHierarchy();

    }

    public function getBinaryTree()
    {
        
    }
    

    public function binary()
    {
        return $this->hasOne(TreeBinary::class,'parent_id','id');
    }

    public function linear()
    {

        return $this->hasOne(TreeLinear::class,'user_id');
    }

    public function binaryTree()
    {

        return $this->hasManyThrough(User::class,TreeBinary::class,'child_id');
    }


    protected $fillable = [
        'email',
        'username',
        'password',
        'last_name',
        'first_name',
        'permissions',
        'parent_id'
    ];

    /**
     * The attributes that should be hidden for arrays.
     * @var array
     */
    protected $hidden
        = [
            'password',
        ];

    protected $loginNames = ['email','username'];





    public function profile()
    {
        return $this->hasOne(Profile::class);
    }

    public function wallet()
    {

        return $this->hasOne(Wallet::class);
    }

    public function invitesIssued()
    {
        return $this->hasMany(Invite::class);
    }

    public function transactionsSent()
    {
        return $this->hasMany(Transaction::class, 'sender');
    }

    public function transactionsRecieved()
    {
        return $this->hasMany(Transaction::class, 'reciever');
    }






    public function getAuthIdentifier()
    {
        $this->getAuthIdentifier();
    }



    public function getAuthIdentifierName()
    {
        return $this->getUserLoginName();
    }



    public function getAuthPassword()
    {
        // TODO: Implement getAuthPassword() method.
    }

    public function getRememberToken()
    {
        return "xxxxxx";
    }

    public function setRememberToken($value)
    {
        $v = $value;
    }

    public function getRememberTokenName()
    {
        return "9888";
    }

}