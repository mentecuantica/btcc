<?php

namespace Btcc\Models\Transaction;

use Btcc\Models\User;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;

/**
 * Btcc\Models\UsersTransaction
 *
 * @property integer $id
 * @property integer $user_id
 * @property integer $amount
 * @property integer $type
 * @property integer $status
 * @property integer $sender
 * @property integer $reciever
 * @property boolean $debit_flag
 * @property string $comment
 * @property string $hash
 * @property \Carbon\Carbon $created_at
 * @property \Carbon\Carbon $updated_at
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereId($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereUserId($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereAmount($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereType($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereStatus($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereSender($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereReciever($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereDebitFlag($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereComment($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereHash($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereCreatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereUpdatedAt($value)
 * @mixin \Eloquent
 * @property-read \Btcc\Models\User $parentUser
 * @property-read \Btcc\Models\User $recieverUser
 * @property-read \Btcc\Models\User $senderUser
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction ofType($type)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction processed()
 * @property integer $sender_id
 * @property integer $reciever_id
 * @property boolean $credit_flag
 * @property-read \Btcc\Models\User $issuedBy
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereSenderId($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereRecieverId($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction whereCreditFlag($value)
 */
class BaseTransaction extends Model implements Transactable
{
    use TypeTrait;

    protected $table = 'users_transactions';


    protected $original = [
      'status'=>0,

    ];

    protected $fillable = [
        'type',
        'amount',
        'reciever_id',
        'comment',
        'debit_flag',
        'credit_flag',
    ];

    public function getTypeText()
    {
        return static::getTransactionTypesValues()[$this->type];
    }

    /**
     * Validation rules
     *
     * @var array
     */
    public static $rules = [
        'amount' => 'required|numeric',
    ];

    /**
     * @return User
     */
    public function issuedBy()
    {
        return $this->belongsTo(User::class,'user_id');
    }

    /**
     * @return User
     */
    public function reciever()
    {
        return $this->belongsTo(User::class,'reciever_id');
    }

    /**
     * @return User
     */
    public function sender()
    {
        return $this->belongsTo(User::class,'sender_id');
    }


    /**
     * Scope a query to only include Transaction of a given type.
     *
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeOfType(Builder $query, $type)
    {
        return $query->where('type', $type);
    }

    public function scopeProcessed($query)
    {
        return $query;
    }

    protected function asJson($value)
    {
        return parent::asJson($value); // TODO: Change the autogenerated stub
    }

}
