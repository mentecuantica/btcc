<?php
/**
 * Author: Yuri Efimov
 * User: octopus
 * Date: 5/29/2016
 * Time: 10:52 AM
 * Filename: Transaction.php
 */

namespace Btcc\Models\Transaction;

use Cache;

/**
 * Class Transaction
 *
 * @package app\Models
 * Btcc\Models\Transaction
 * @property integer $id
 * @property integer $user_id
 * @property integer $amount
 * @property integer $type
 * @property integer $status
 * @property integer $sender
 * @property integer $reciever
 * @property boolean $debit_flag
 * @property string  $comment
 * @property string  $hash
 * @property boolean $credit_flag
 * @property \Carbon\Carbon $created_at
 * @property \Carbon\Carbon $updated_at
 * @property-read \Btcc\Models\User $recieverUser
 * @property-read \Btcc\Models\User $senderUser
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereId($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereUserId($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereAmount($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereType($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereStatus($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereSender($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereReciever($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereDebitFlag($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereCreditFlag($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereComment($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereHash($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereCreatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereUpdatedAt($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction ofType($type)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\BaseTransaction processed()
 * @mixin \Eloquent
 * @property-read \Btcc\Models\User $parentUser
 * @property integer $sender_id
 * @property integer $reciever_id
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereSenderId($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\UserTransaction whereRecieverId($value)
 * @method static \Illuminate\Database\Query\Builder|\Btcc\Models\Transaction\UserTransaction typePlus()
 * @property-read \Btcc\Models\User $issuedBy
 */
class UserTransaction extends BaseTransaction {


    protected static $CASHIN_FUNDING= self::TYPE_CASHIN_FUNDING;

  /*  public function scopeTypePlus(Builder $query)
    {
        return $query->where(['type'=>static::$CASHIN_FUNDING]);
    }*/

        
    public function totalAmount()
    {
        return $this->newBaseQueryBuilder()->where(['user_id'=>user()->id])->sum('amount');
    }

    public function totalAmount2()
    {
        return static::query()->where(['user_id'=>user()->id])->sum('amount');
    }

    public static function staticTotalAmount()
    {
        return static::sum('amount'); // TODO: Change the autogenerated stub
    }

    public static function getSummary($userId)
    {

        $subQuery = '(SELECT CASE WHEN debit_flag=TRUE THEN amount 
WHEN debit_flag=FALSE THEN (-amount) END as amount 
FROM users_transactions WHERE user_id =:userId) as dc_transactions';



        if (Cache::has('btcc.summary')) {
            return Cache::get('btcc.summary');
        }

        $result =  \DB::selectOne('SELECT sum(amount) FROM '.$subQuery,['userId'=>$userId])->sum;

        Cache::put('btcc.summary', $result,2);

        return $result;

        //dd($result);
        //return \DB::selectOne('sum(amount) FROM '.$subQuery,['userId'=>$userId])
        //    ->setBindings()
        //    ->first();
        //->selectSub($subQuery, 'dc_transactions')
    }

}